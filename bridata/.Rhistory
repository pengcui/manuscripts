cor(mydata[,30],mydata[,20],method=c('spearman'))
mydata=read.table('/home/ckivip/mywork/Dnase1/zlater/data_avg/d5_histonepeak')
head(mydata)
mean(mydata[3:12,2])
mydata=read.table('/home/ckivip/mywork/Dnase1/zlater/data_avg/d5_tfbspeakk')
mydata=read.table('/home/ckivip/mywork/Dnase1/zlater/data_avg/d5_tfbspeak')
head(mydata)
mean(mydata[-c(1,9,18,19),2])
802518-220029
790793-143607-173091-30878
choose(33,3)
0.45/0.77
?norm
?qnorm
qnorm(0.1,1100,75)
75^2/144
39.0625^0.5
qnorm(0.1,1100,6.25)
svrcrossvalidation=function(datamatrix,featurevector){     # most modify
library('e1071')
kk=c()
actual=c()
pre=c()
n=nrow(datamatrix)/10
for (i in 1:10){
if (length(kk) > 0){
se=sample((1:nrow(datamatrix))[-kk],n)
}else{
se=sample((1:nrow(datamatrix)),n)
}
te=datamatrix[se,]
tr=datamatrix[-se,]
mysvr=svm(tr[,featurevector],log(tr[,1],2),probability=T)
mysvrpre=predict(mysvr,te[,featurevector])
actual=c(actual,log(te[,1],2))
pre=c(pre,mysvrpre)
kk=c(kk,se)
}
myresult=list(actual,pre)
return(myresult)
}
data=read.table('/home/ckivip/mywork/Dnase1/zlater/max/data_max/zzzzzz_max',header=T)
#head(data)
alldata=as.matrix(data[,4:41])
#head(alldata)
#alldata=alldata[1:84830,]
#aa=sample(1:nrow(alldata),5000)
#mydata=alldata[aa,]
#mydata=data[aa,]
#write.table(mydata,file='/home/ckivip/mywork/Dnase1/zlater/data_avg/featuresig/zzzzzz',sep='\t',row.names=F,quote=F)
mydata=alldata
histone=c(2:6,8:12)
tf=c(13:35)
allfeature=c(histone,tf)
mylist=svrcrossvalidation(mydata,c(32))
mycorr = round(cor(mylist[[1]], mylist[[2]],method=c('spearman')),2)  # compute the correlation
mycorr
dev.off()
par(mfrow=c(1,2),mar=c(5,4,3,1))
# plot the correlation using all the features
plot(mylist[[1]],mylist[[2]], pch=20, col="blue", cex=0.6,xlab='',ylab='')
title(xlab="The signal of Dnase-seq (log2)", ylab="Predicted Signal",mgp=c(2.3,1,0))
mylm = lm(mylist[[1]]~mylist[[2]])
abline(mylm, lwd=2)
text(0.05,-4.5,paste("SCC=", mycorr, sep=""),cex=0.8)
mtext('(a)',side=3,at=-5.5,adj=0,cex=1.5)
# barplot for the only one feature
#names(allscc)=names(data)[5:15]
#barplot(sort(allscc,T),ylim=c(0,0.7),xlab='',ylab='',axisnames=F)
featurepowers=read.table('/home/ckivip/mywork/Dnase1/zlater/max/data_max/parallel/one1',header=F)
histonevec=c(1,2,4:6,8,10,26,29,30)
tfvec=c(3,7,9,11:14,16:22,24,27,28,31:34,36,37)
barplot(rev(featurepowers[tfvec,2]),ylim=c(0,0.65),xlab='',ylab='',axisnames=F)
mtext(rev(featurepowers[tfvec,1]),line=0.5,side=1,at=seq(0.7,28,1.2),las=2,cex=0.8)
mtext('SCC',side=2,line=2.3)
mtext('(b)',side=3,at=-1,cex=1.5)
library(ggplot2)
set.seed(1410)  # make the sample reproducible
head(diamonds)
dsmall = diamonds[sample(nrow(diamonds),100), ]
head(dsmall)
qplot(carat, prize)
qplot(carat, prize, data = diamonds)
qplot(carat, price, data = diamonds)
qplot(log(carat), log(price), data = diamonds)
qplot(carat, x*y*z, data = diamonds)
qplot(carat, prize, data = dsmall, colour = color)
qplot(carat, price, data = dsmall, colour = color)
qplot(carat, price, data = dsmall, colour = color, shape = cut)
qplot(carat, price, data = dsmall, shape = cut)
qplot(carat, price, data = dsmall, colour = I('red'))
qplot(carat, price, data = dsmall, colour = color)
qplot(carat, price, data = dsmall, colour = I('red'))
qplot(carat, price, data = dsmall, colour = color, shape = cut)
qplot(carat, price, data = dsmall, alpha = I (0.1))
qplot(carat, price, data = dsmall, alpha = I (0.5))
qplot(carat, price, data = diamonds, geom = c('point', ''))
qplot(carat, price, data = diamonds, geom = c('point', 'smooth'))
qplot(carat, price, data = diamonds, geom = c('point', 'smooth'), span = 0.2)
qplot(carat, price, data = diamonds, geom = c('point', 'smooth'), span = 1)
qplot(carat, price, data = dsmall, geom = c('point', 'smooth'), span = 1)
qplot(carat, price, data = dsmall, geom = c('point', 'smooth'), span = 0.1)
qplot(carat, price, data = dsmall, geom = c('point', 'smooth'), span = 1)
qplot(color, price/carat, data = diamonds, geom = 'jitter')
qplot(color, price/carat, data = diamonds, geom = 'boxplot')
qplot(color, price/carat, data = diamonds, geom = 'boxplot', fill = I('red') )
qplot(color, price/carat, data = diamonds, geom = 'boxplot', fill = color )
qplot(color, price/carat, data = diamonds, geom = 'boxplot', fill = color, outpch=NA )
qplot(color, price/carat, data = diamonds, geom = 'boxplot', fill = color, outline=NA )
qplot(color, price/carat, data = diamonds, geom = 'boxplot', fill = color, outline=F )
qplot(carat, data = diamonds, geom = 'histtogram')
qplot(carat, data = diamonds, geom = 'histogram')
qplot(carat, data = diamonds, geom = 'density')
qplot(carat, data = diamonds, geom = 'histogram', fill = color)
qplot(carat, data = diamonds, geom = 'density', colour = color)
qplot(carat, data = diamonds, geom = 'histogram', fill = color)
qplot(color, data = diamonds, geom = 'barplot')
qplot(color, data = diamonds, geom = 'bar')
head(economics)
qplot(date, unemploy/pop, data = economics, geom = 'line')
x = c(1,3,5,2)
qplot(x, geom = line)
y=c(1,2,3,4)
qplot(y,x, geom = line)
qplot(y,x, geom = 'line')
qplot(x, geom = 'line')
qplot(y,x, geom = 'line')
qplot(carat, data = diamonds, facets = color ~ ., geom = 'histogram', )
qplot(carat, data = diamonds, facets = color ~ ., geom = 'histogram', binwidth = 0.1)
qplot(carat, data = diamonds, facets = color ~ ., geom = 'histogram', binwidth = 0.1, xlim =c(0,3))
qplot(carat, ..density.., data = diamonds, facets = color ~ ., geom = 'histogram', binwidth = 0.1, xlim =c(0,3))
head(mpg)
data(mpg)
library('ggplot2')
head(mpg)
length(mpg)
length(mpg$manufacturer)
table(mpg$manufacturer)
length(mpg$manufacturer)
table(mpg$manufacturer)
qplot(displ, hwy, data = mpg, )
qplot(displ, hwy, data = mpg, colour = cyl)
head(mpg$cyl)
table(mpg$cyl)
qplot(displ, hwy, data = mpg, colour = table(cyl))
qplot(displ, hwy, data = mpg, colour = factor(cyl))
head(mpg)
table(mpg$year)
qplot(displ, hwy, data = mpg, facet = . ~ year)
qplot(displ, hwy, data = mpg, facets = . ~ year)
qplot(displ, hwy, data = mpg, facets = . ~ year) + geom_smooth()
p=qplot(displ, hwy, data = mpg, facets = . ~ year) + geom_smooth()
summary(p)
library('ggplot2')
p=ggplot(diamonds, aes(carat, price, colour = cut))
p
p = p + layer(geom = 'point')
p
str(diamonds)
library('ggplot2')
str(mtcars)
p = ggplot(mtcars, aex(mpg, wt))
p = ggplot(mtcars, aes(mpg, wt))
p + geom_point()
p + geom_point(aes(colour = factor(cyl)))
p + geom_point(aes(y = disp))
p + geom_point(colour = 'darkblue')
p + geom_point(colour = 'red')
p + geom_point(aes(colour = 'red'))
str(Oxboys)
library('nlme')
head(Oxboys)
str(Oxboys)
p = ggplot(Oxboys, aes(age, height, group = Subject))
p + geom_line()
head(Oxboys)
Oxboys
p = ggplot(Oxboys, aes(age, height))
p + geom_line()
p = ggplot(Oxboys, aes(age, height), group = Subject)
p + geom_line()
p = ggplot(Oxboys, aes(age, height), group = Subject))
p + geom_line()
p = ggplot(Oxboys, aes(age, height), group = Subject)
p + geom_line()
p = ggplot(Oxboys, aes(age, height, group = Subject))
p + geom_line()
p + geom_smooth()
p + geom_smooth(se = F)
p + geom_smooth(aes(group = 1)se = F)
p + geom_smooth(aes(group = 1), se = F)
p + geom_smooth(aes(group = 1), method = 'lm', se = F)
p + geom_smooth(aes(group = Subject), method = 'lm', se = F)
p + geom_smooth(aes(group = 1), method = 'lm', se = F)
p = ggplot(Oxboys, aes(age, height)
p + geom_smooth(aes(group = 1), method = 'lm', se = F)
p = ggplot(Oxboys, aes(age, height))
p + geom_smooth(aes(group = 1), method = 'lm', se = F)
p + geom_line() + geom_smooth(aes(group = 1), method = 'lm', se = F)
p + geom_line(aes(group = Subject)) + geom_smooth(aes(group = 1), method = 'lm', se = F)
p + geom_line(aes(group = Subject)) + geom_smooth(aes(group = 1), method = 'lm', se = F, size = 2)
p + geom_line(aes(group = Subject)) + geom_smooth(aes(group = 1), method = 'lm', se = F, size = 2) + geom_boxplot()
p + geom_line(aes(group = Subject)) + geom_smooth(aes(group = 1), method = 'lm', se = F, size = 2) + geom_boxplot(aes(group = Subject))
p = ggplot(Oxboys, aes(age, height))
p + geom_line(aes(group = Subject)) + geom_smooth(aes(group = 1), method = 'lm', se = F, size = 2) + geom_boxplot(aes(group = Subject))
p + geom_line(aes(group = Subject)) + geom_smooth(aes(group = 1), method = 'lm', se = F, size = 2)
p + boxplot()
p + geom_boxplot()
p + geom_boxplot(aex(group = Subject))
p + geom_boxplot(aes(group = Subject))
p + geom_boxplot()
p + geom_boxplot(aes(group = Subject))
p + geom_boxplot())
p + geom_boxplot()
j = ggplot(Oxboys, aes(Occasion, height))
j + geom_boxplot()
j + geom_line(aes(group = Subject)) + geom_smooth(aes(group = 1), method = 'lm', se = F, size = 2) + geom_boxplot(aes(group = Subject))
j + geom_line(aes(group = Subject)) + geom_smooth(aes(group = 1), method = 'lm', se = F, size = 2) + geom_boxplot()
j + geom_line(aes(group = Subject), colour = 'red') + geom_smooth(aes(group = 1), method = 'lm', se = F, size = 2) + geom_boxplot()
library('ggplot2')
p = ggplot(diamonds, aes(carat))
p = geom_histogram(aes(y = ..density..), binwidth = 0.1)
p = ggplot(diamonds, aes(carat))
p + geom_histogram(aes(y = ..density..), binwidth = 0.1)
p + geom_histogram(aes(y = density), binwidth = 0.1)
p + geom_histogram(aes(y = ..density..), binwidth = 0.1)
p + geom_density()
p + geom_histogram(aes(y = ..density..), binwidth = 0.1)
p + geom_density()
text(0.05,-4.5,paste("R^2=", mycorr, sep=""),cex=0.8)
plot(c(1,2,3))
text(2,2,paste('P^2'))
text(2,2,expression'('P^2'))
text(2,2,expression'(P^2))
hljk
)
''
text(2,2,expression(P^2))
text(2,3,expression(P^2))
text(2,3,expression(paste('R^2',3)))
text(2.5,2.5,expression(paste('R^2=',3)))
text(2.5,2.5,expression(paste(R^2=,3)))
text(2.5,2.5,expression(paste("R^2=",3)))
text(2.5,2.5,expression(paste("R^2=",3,sep="")))
text(2.5,2.5,expression(paste("R^2=","3",sep="")))
text(1,2.5,expression(paste("R^2=","3",sep="")))
text(1,2.5,expression(R^2)
)
text(1,2.5,expression(R^2=))
a=3
text(1,2.5,expression(R^2=a))
text(1,2.5,bquote(R^2=.(a)))
text(1,2.5,bquote(R^2 ~ '=' ~ .(a)))
text(1.5,1.5,bquote(R^2 ~ '=' ~ .(a)))
setwd('/home/ckivip/mywork/Dnase1/zlater/manuscripts/bridata')
# (1) 10-fold cross validation in svr.
svrcrossvalidation=function(datamatrix,featurevector){
library('e1071')
kk=c()
actual=c()
pre=c()
n=nrow(datamatrix)/10
##  using different test data in every iteration
for (i in 1:10){
if (length(kk) > 0){
se=sample((1:nrow(datamatrix))[-kk],n)
}else{
se=sample((1:nrow(datamatrix)),n)
}
te=datamatrix[se,]
tr=datamatrix[-se,]
mysvr=svm(tr[,featurevector],log(tr[,1],2),probability=T)
mysvrpre=round(predict(mysvr,te[,featurevector]),3)
#  combine the results into actual and pre vectors in every iteration.
actual=c(actual,log(te[,1],2))
pre=c(pre,mysvrpre)
kk=c(kk,se)
}
myresult=list(pre,actual)
return(myresult)
}
data=read.table('./max_sig.txt',header=T)  ## modify this line to choose avg_sig.txt/max_sig.txt
mydata=as.matrix(data[,4:37])
histone=c(2:11)
tf=c(12:34)
allfeature=c(histone,tf)
mylist=svrcrossvalidation(mydata, allfeature)  ## modify this line to choose different features
mycorr = round(cor(mylist[[1]], mylist[[2]], method=c('spearman')),2)  ## compute the correlation
mycorr
dev.off()
par(mfrow=c(1,2),mar=c(5,4,3,1))
plot(mylist[[1]], mylist[[2]],pch=20, col="blue", cex=0.6,xlab='',ylab='')
title(xlab="Predicted Signals (log2)",ylab="The signals of Dnase-seq (log2)",mgp=c(2.3,1,0))
dev.off()
par(mfrow=c(1,2),mar=c(5,4,3,1))
plot(mylist[[1]], mylist[[2]],pch=20, col="blue", cex=0.6,xlab='',ylab='')
title(xlab="Predicted Signals (log2)",ylab="The Dnase-seq signals (log2)",mgp=c(2.3,1,0))
mylm = lm(mylist[[1]]~mylist[[2]])
abline(mylm, lwd=2)
summary(mylm)  ## compute the R squared
mylm = lm(mylist[[1]]~mylist[[2]])
abline(mylm, lwd=2)
dev.off()
par(mfrow=c(1,2),mar=c(5,4,3,1))
plot(mylist[[1]], mylist[[2]],pch=20, col="blue", cex=0.6,xlab='',ylab='')
title(xlab="Predicted Signals (log2)",ylab="The Dnase-seq signals (log2)",mgp=c(2.3,1,0))
mylm = lm(mylist[[1]]~mylist[[2]])
abline(mylm, lwd=2)
mylist=svrcrossvalidation(mydata, allfeature)  ## modify this line to choose different features
plot(mylist[[1]], mylist[[2]],pch=20, col="blue", cex=0.6,xlab='',ylab='')
title(xlab="Predicted Signals (log2)",ylab="The Dnase-seq signals (log2)",mgp=c(2.3,1,0))
mylm = lm(mylist[[1]]~mylist[[2]])
abline(mylm, lwd=2)
plot(mylist[[2]], mylist[[1]],pch=20, col="blue", cex=0.6,xlab='',ylab='')
mylm = lm(mylist[[2]]~mylist[[1]])
abline(mylm, lwd=2)
plot(mylist[[1]], mylist[[2]],pch=20, col="blue", cex=0.6,xlab='',ylab='')
title(xlab="Predicted Signals (log2)",ylab="The Dnase-seq signals (log2)",mgp=c(2.3,1,0))
mylm = lm(mylist[[1]]~mylist[[2]])
abline(mylm, lwd=2)
svrcrossvalidation=function(datamatrix,featurevector){
library('e1071')
kk=c()
actual=c()
pre=c()
n=nrow(datamatrix)/10
##  using different test data in every iteration
for (i in 1:10){
if (length(kk) > 0){
se=sample((1:nrow(datamatrix))[-kk],n)
}else{
se=sample((1:nrow(datamatrix)),n)
}
te=datamatrix[se,]
tr=datamatrix[-se,]
mysvr=svm(tr[,featurevector],log(tr[,1],2),probability=T)
mysvrpre=round(predict(mysvr,te[,featurevector]),3)
#  combine the results into actual and pre vectors in every iteration.
actual=c(actual,log(te[,1],2))
pre=c(pre,mysvrpre)
kk=c(kk,se)
}
myresult=list(actual,pre)
return(myresult)
}
mylist=svrcrossvalidation(mydata, histone)  ## modify this line to choose different features
dev.off()
par(mfrow=c(1,2),mar=c(5,4,3,1))
plot(mylist[[1]], mylist[[2]],pch=20, col="blue", cex=0.6,xlab='',ylab='')
title(xlab="The Dnase-seq signals (log2)",ylab="Predicted Signals (log2)",mgp=c(2.3,1,0))
mylm = lm(mylist[[1]]~mylist[[2]])
abline(mylm, lwd=2)
summary(mylm)  ## compute the R squared
text(0.05,-4.5,bquote(R^2 ~ '=' ~ 0.59),cex=0.8)
0.76^2
0.77^2
plot(mylist[[2]], mylist[[1]],pch=20, col="blue", cex=0.6,xlab='',ylab='')
mylm = lm(mylist[[2]]~mylist[[1]])
abline(mylm, lwd=2)
dev.off()
par(mfrow=c(1,2),mar=c(5,4,3,1))
plot(mylist[[1]], mylist[[2]],pch=20, col="blue", cex=0.6,xlab='',ylab='')
title(xlab="The Dnase-seq signals (log2)",ylab="Predicted Signals (log2)",mgp=c(2.3,1,0))
mylm = lm(mylist[[1]]~mylist[[2]])
abline(mylm, lwd=2)
summary(mylm)  ## compute the R squared
text(0.05,-4.5,bquote(R^2 ~ '=' ~ 0.59),cex=0.8)
mtext('(a)',side=3,at=-5.5,adj=0,cex=1.5)
featurepowers=read.table('./one_feature',header=F)
histonevec=1:10
tfvec=11:34
barplot(featurepowers[histonevec,2],ylim=c(0,0.7),xlab='',ylab='',axisnames=F)
dev.off()
par(mfrow=c(1,2),mar=c(5,4,3,1))
plot(mylist[[1]], mylist[[2]],pch=20, col="blue", cex=0.6,xlab='',ylab='')
title(xlab="The Dnase-seq signals (log2)",ylab="Predicted Signals (log2)",mgp=c(2.3,1,0))
mylm = lm(mylist[[1]]~mylist[[2]])
abline(mylm, lwd=2)
summary(mylm)  ## compute the R squared
text(0.05,-4.5,bquote(R^2 ~ '=' ~ 0.59),cex=0.8)
mtext('(a)',side=3,at=-5.5,adj=0,cex=1.5)
featurepowers=read.table('./one_feature',header=F)
histonevec=1:10
tfvec=11:34
barplot(featurepowers[histonevec,2],ylim=c(0,0.7),xlab='',ylab='',axisnames=F)
mtext(featurepowers[histonevec,1],line=0.5,side=1,at=seq(0.6,12,1.2),las=2,cex=0.8)
dev.off()
par(mfrow=c(1,2),mar=c(5,4,3,1))
plot(mylist[[1]], mylist[[2]],pch=20, col="blue", cex=0.6,xlab='',ylab='')
title(xlab="The Dnase-seq signals (log2)",ylab="Predicted Signals (log2)",mgp=c(2.3,1,0))
mylm = lm(mylist[[1]]~mylist[[2]])
abline(mylm, lwd=2)
summary(mylm)  ## compute the R squared
text(0.05,-4.5,bquote(R^2 ~ '=' ~ 0.59),cex=0.8)
mtext('(a)',side=3,at=-5.5,adj=0,cex=1.5)
dev.off()
par(mfrow=c(1,2),mar=c(5,4,3,1))
plot(mylist[[1]], mylist[[2]],pch=20, col="blue", cex=0.6,xlab='',ylab='')
title(xlab="The Dnase-seq signals (log2)",ylab="Predicted signals (log2)",mgp=c(2.3,1,0))
mylm = lm(mylist[[1]]~mylist[[2]])
abline(mylm, lwd=2)
summary(mylm)  ## compute the R squared
text(0.05,-4.5,bquote(R^2 ~ '=' ~ 0.59),cex=0.8)
mtext('(a)',side=3,at=-5.5,adj=0,cex=1.5)
featurepowers=read.table('./one_feature',header=F)
histonevec=1:10
tfvec=11:34
barplot(featurepowers[histonevec,2],ylim=c(0,0.6),xlab='',ylab='',axisnames=F)
mtext(featurepowers[histonevec,1],line=0.5,side=1,at=seq(0.6,12,1.2),las=2,cex=0.8)
mtext('SCC',side=2,line=2.3)
mtext('(b)',side=3,at=-1,cex=1.5)
barplot(featurepowers[histonevec,2],ylim=c(0,0.6),xlab='',ylab='',axisnames=F)
mtext(featurepowers[histonevec,1],line=0.5,side=1,at=seq(0.6,12,1.2),las=2,cex=0.8)
mtext('(b)',side=3,at=-1,cex=1.5)
mtext('(b)',side=3,at=1,cex=1.5)
mtext('(b)',side=3,at=-1,cex=1.5)
?mtext
mtext('(b)',line=1,side=3,at=-1,cex=1.5)
mtext('(b)',line=0.5,side=3,at=-1,cex=1.5)
dev.off()
par(mfrow=c(1,2),mar=c(5,4,3,1))
plot(mylist[[1]], mylist[[2]],pch=20, col="blue", cex=0.6,xlab='',ylab='')
title(xlab="The Dnase-seq signals (log2)",ylab="Predicted signals (log2)",mgp=c(2.3,1,0))
mylm = lm(mylist[[1]]~mylist[[2]])
abline(mylm, lwd=2)
summary(mylm)  ## compute the R squared
text(0.05,-4.5,bquote(R^2 ~ '=' ~ 0.59),cex=0.8)
mtext('(a)',side=3,at=-5.5,adj=0,cex=1.5)
# barplot for the only one feature
featurepowers=read.table('./one_feature',header=F)
histonevec=1:10
tfvec=11:34
#--------------------------------------
# HM barplot
barplot(featurepowers[histonevec,2],ylim=c(0,0.6),xlab='',ylab='',axisnames=F)
mtext(featurepowers[histonevec,1],line=0.5,side=1,at=seq(0.6,12,1.2),las=2,cex=0.8)
mtext('SCC',side=2,line=2.3)
mtext('(b)',line=0.5,side=3,at=-1,cex=1.5)
mtext('(a)',line=0.5,side=3,at=-5.5,adj=0,cex=1.5)
mtext('(b)',line=0.7,side=3,at=-1,cex=1.5)
barplot(featurepowers[histonevec,2],ylim=c(0,0.6),xlab='',ylab='',axisnames=F)
mtext(featurepowers[histonevec,1],line=0.5,side=1,at=seq(0.6,12,1.2),las=2,cex=0.8)
mtext('(b)',line=0.8,side=3,at=-1,cex=1.5)
barplot(featurepowers[histonevec,2],ylim=c(0,0.6),xlab='',ylab='',axisnames=F)
mtext('(b)',line=1,side=3,at=-1,cex=1.5)
dev.off()
par(mfrow=c(1,2),mar=c(5,4,3,1))
plot(mylist[[1]], mylist[[2]],pch=20, col="blue", cex=0.6,xlab='',ylab='')
title(xlab="The Dnase-seq signals (log2)",ylab="Predicted signals (log2)",mgp=c(2.3,1,0))
mylm = lm(mylist[[1]]~mylist[[2]])
abline(mylm, lwd=2)
summary(mylm)  ## compute the R squared
text(0.05,-4.5,bquote(R^2 ~ '=' ~ 0.59),cex=0.8)
mtext('(a)',line=1,side=3,at=-5.5,adj=0,cex=1.5)
barplot(featurepowers[histonevec,2],ylim=c(0,0.6),xlab='',ylab='',axisnames=F)
mtext(featurepowers[histonevec,1],line=0.5,side=1,at=seq(0.6,12,1.2),las=2,cex=0.8)
mtext('SCC',side=2,line=2.3)
mtext('(b)',line=1,side=3,at=-1,cex=1.5)
mylist=svrcrossvalidation(mydata, tf)  ## modify this line to choose different features
dev.off()
par(mfrow=c(1,2),mar=c(5,4,3,1))
plot(mylist[[1]], mylist[[2]],pch=20, col="blue", cex=0.6,xlab='',ylab='')
title(xlab="The Dnase-seq signals (log2)",ylab="Predicted signals (log2)",mgp=c(2.3,1,0))
mylm = lm(mylist[[1]]~mylist[[2]])
abline(mylm, lwd=2)
summary(mylm)  ## compute the R squared
text(0.05,-4.5,bquote(R^2 ~ '=' ~ 0.58),cex=0.8)
mtext('(a)',line=1,side=3,at=-5.5,adj=0,cex=1.5)
barplot(featurepowers[tfvec,2],ylim=c(0,0.6),xlab='',ylab='',axisnames=F)
mtext(featurepowers[tfvec,1],line=0.5,side=1,at=seq(0.7,28,1.2),las=2,cex=0.8)
mtext('SCC',side=2,line=2.3)
mtext('(b)',line=1,side=3,at=-1,cex=1.5)
mylist=svrcrossvalidation(mydata, histone)  ## modify this line to choose different features
dev.off()
par(mfrow=c(1,2),mar=c(5,4,3,1))
plot(mylist[[1]], mylist[[2]],pch=20, col="blue", cex=0.6,xlab='',ylab='')
title(xlab="The Dnase-seq signals (log2)",ylab="Predicted signals (log2)",mgp=c(2.3,1,0))
mylm = lm(mylist[[1]]~mylist[[2]])
abline(mylm, lwd=2)
summary(mylm)  ## compute the R squared
text(0.05,-4.5,bquote(R^2 ~ '=' ~ 0.58),cex=0.8)
mtext('(a)',line=1,side=3,at=-5.5,adj=0,cex=1.5)
barplot(featurepowers[histonevec,2],ylim=c(0,0.6),xlab='',ylab='',axisnames=F)
mtext(featurepowers[histonevec,1],line=0.5,side=1,at=seq(0.6,12,1.2),las=2,cex=0.8)
mtext('SCC',side=2,line=2.3)
mtext('(b)',line=1,side=3,at=-1,cex=1.5)
mylist=svrcrossvalidation(mydata, allfeature)  ## modify this line to choose different features
dev.off()
par(mfrow=c(1,2),mar=c(5,4,3,1))
plot(mylist[[1]], mylist[[2]],pch=20, col="blue", cex=0.6,xlab='',ylab='')
title(xlab="The Dnase-seq signals (log2)",ylab="Predicted signals (log2)",mgp=c(2.3,1,0))
mylm = lm(mylist[[1]]~mylist[[2]])
abline(mylm, lwd=2)
summary(mylm)  ## compute the R squared
text(0.05,-4.5,bquote(R^2 ~ '=' ~ 0.66),cex=0.8)
mtext('(a)',line=1,side=3,at=-5.5,adj=0,cex=1.5)
mydata1=read.table('./one_feature')
mydata2=read.table('./two_feature')
mydata3=read.table('./three_feature')
library('vioplot')
vioplot(mydata1$V2,mydata2$V3,mydata3$V4,c(0.85),names=c(1,2,3,'all'))
mtext('SCC',side=2,line=2.2)
library('graphics')
clip(x1=3.85,x2=4.15,y1=0,y2=1)
abline(h=0.81)
points(x=4,y=0.81)
usr=par('usr')
do.call('clip',as.list(usr))
lines(c(1,2,3,4),c(max(mydata1$V2),max(mydata2$V3),max(mydata3$V4),c(0.81)),col=2)
lines(c(1,2,3,4),c(median(mydata1$V2),median(mydata2$V3),median(mydata3$V4),c(0.81)),col=3)
lines(c(1,2,3,4),c(min(mydata1$V2),min(mydata2$V3),min(mydata3$V4),c(0.81)),col=9)
mtext('(b)',line=1,side=3,at=-0.15,cex=1.5)
